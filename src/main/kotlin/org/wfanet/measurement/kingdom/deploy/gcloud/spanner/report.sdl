-- Copyright 2020 The Cross-Media Measurement Authors
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--      http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- Cloud Spanner database schema for the Kingdom report related tables.
--
-- Table hierarchy:
--   Root
--   ├── Advertisers
--   │   └── ReportConfigs
--   │       ├── ReportConfigCampaigns
--   │       └── ReportConfigSchedules
--   │           └── Reports
--   │               └── ReportLogEntries
--   │               └── ReportRequisitions
--   └── DataProviders
--       └── Campaigns
--           └── Requisitions
--
-- The important foreign key relationships between the tables are:
--
--   Advertisers <- 1:many -> Campaigns
--   ReportConfigs <- many:many -> Campaigns
--   Requisitions <- many:many -> Reports (tracked in ReportRequisitions)
--
-- Identifiers are random INT64s. APIs (and therefore by extension, UIs) should
-- expose only External identifiers, and ideally only web-safe base64 versions
-- of them without padding (e.g. RFC4648's base64url encoding without padding).
--
-- The schema contains many serialized protocol buffers, usually in two formats:
-- JSON and binary. This may be a little surprising that the data is duplicated.
-- In the long run, we intend to deduplicate this. However, in the short term,
-- JSON provides debugging value.
--
-- A MeasurementConfig specifies what statistics to generate Measurements for. The
-- MeasurementConfigSchedules for a MeasurementConfig determine the frequency with which
-- to generate these Measurements, and how many days' data to include in each. The
-- campaigns included in a MeasurementConfig are stored in MeasurementConfigCampaigns.
--
-- When it's time to act on a MeasurementConfigSchedule item, a Measurement is generated
-- in a pending state. Then, rows are added to Requisitions as necessary. Note
-- that Requisitions are not tied to a Measurement or MeasurementConfig -- multiple
-- Measurements and MeasurementConfigs can utilize any Requisition.
--
-- Data Providers fetch the unfulfilled Requisitions for campaigns in their
-- systems, compute the underlying data, and upload it via the Publisher Data
-- Service.
--
-- Once all Requisitions for a Measurement have been fulfilled, the multi-party
-- computation can begin.

CREATE TABLE MeasurementConsumers (
  MeasurementConsumerId          INT64 NOT NULL,

  ExternalMeasurementConsumerIdId  INT64 NOT NULL,

  MeasurementConsumerDetails     BYTES(MAX) NOT NULL,
  MeasurementConsumerDetailsJson STRING(MAX) NOT NULL,
) PRIMARY KEY (MeasurementConsumerId);

-- For measurement consumer APIs.
CREATE UNIQUE INDEX MeasurementConsumersByExternalId ON MeasurementConsumers(ExternalMeasurementConsumerId);


CREATE TABLE DataProviders (
  DataProviderId          INT64 NOT NULL,
  ExternalDataProviderId  INT64 NOT NULL,

  DataProviderDetails     BYTES(MAX) NOT NULL,
  DataProviderDetailsJson STRING(MAX) NOT NULL,
) PRIMARY KEY (DataProviderId);

-- For data provider APIs.
CREATE UNIQUE INDEX DataProvidersByExternalId ON DataProviders(ExternalDataProviderId);

-- Each Campaign belongs to both an MeasurementConsumer and a Data Provider.
--
-- This table is used as follows:
--   * Data Providers inform the Local Measurement Provider of all of their
--     campaigns and which MeasurementConsumers they belong to. The identifier
--     provided by the Data Provider for the campaign is stored as
--     ProvidedCampaignId.
--   * The system generates the CampaignId and ExternalCampaignId.
--   * MeasurementConsumers, when setting up MeasurementConfigs, select a subset of the
--     Campaigns that belong to them.
--   * Each Requisition is a calculation for a specific set of campaigns over
--     a time window.
--
-- This is interleaved under Data Providers to make bulk operations from Data
-- Provider APIs more efficient.
-- TODO: evaluate if interleaving under MeasurementConsumer would be more
-- efficient.
CREATE TABLE Campaigns (
  DataProviderId          INT64 NOT NULL,
  CampaignId              INT64 NOT NULL,

  MeasurementConsumerId            INT64 NOT NULL,

  -- Generated by the system, exposed in UIs.
  ExternalCampaignId      INT64 NOT NULL,

  -- Provided by the Data Provider.
  ProvidedCampaignId  STRING(MAX) NOT NULL,

  CampaignDetails         BYTES(MAX) NOT NULL,
  CampaignDetailsJson     STRING(MAX) NOT NULL,

  CONSTRAINT FK_MeasurementConsumer
    FOREIGN KEY (MeasurementConsumerId)
    REFERENCES MeasurementConsumers(MeasurementConsumerId),
) PRIMARY KEY (DataProviderId, CampaignId),
  INTERLEAVE IN PARENT DataProviders ON DELETE CASCADE;

-- Used for MeasurementConsumer APIs, e.g. to support UIs showing all campaigns
-- that an MeasurementConsumer owns.
CREATE INDEX CampaignsByMeasurementConsumer ON Campaigns(MeasurementConsumerId);
CREATE UNIQUE INDEX CampaignsByExternalId ON Campaigns(ExternalCampaignId);
CREATE INDEX CampaignsByProvidedId ON Campaigns(ProvidedCampaignId);


CREATE TABLE MeasurementConfigs (
  MeasurementConsumerId            INT64 NOT NULL,

  MeasurementConfigId          INT64 NOT NULL,
  ExternalMeasurementConfigId  INT64 NOT NULL,

  -- Denormalization of the number of requisitions required for Measurements from
  -- this Measurement config. In effect, it's the product of the number of
  -- interleaved campaigns and the number of MetricDefinitions embedded in
  -- MeasurementConfigDetails.
  NumRequisitions         INT64 NOT NULL,

  -- MeasurementConfigState proto enum.
  State                   INT64 NOT NULL,

  -- MeasurementConfigDetails serialized proto.
  MeasurementConfigDetails     BYTES(MAX) NOT NULL,
  MeasurementConfigDetailsJson STRING(MAX) NOT NULL,

) PRIMARY KEY (MeasurementConsumerId, MeasurementConfigId),
  INTERLEAVE IN PARENT MeasurementConsumers ON DELETE CASCADE;

-- Used by Data Provider and Advertiser APIs to configure and list Measurements.
CREATE UNIQUE INDEX MeasurementConfigsByExternalId
  ON MeasurementConfigs(MeasurementConsumerId, ExternalMeasurementConfigId),
  INTERLEAVE IN MeasurementConsumers;

-- Enable idempotent Measurement creation from MeasurementConfigs.
CREATE INDEX MeasurementsByTimeWindow
  ON Measurements(AdvertiserId, MeasurementConfigId, WindowStartTime, WindowEndTime),
  INTERLEAVE IN MeasurementConfigs;

-- Enable finding Measurements ready to be worked on.
CREATE INDEX MeasurementsByState ON Measurements(State, UpdateTime ASC);

CREATE UNIQUE INDEX MeasurementsByExternalId
  ON Measurements(ExternalMeasurementId, CreateTime DESC);

-- Contains status updates from the Duchies and within the Kingdom for a
-- particular Measurement. For any given Measurement, each Duchy might send many updates
-- (one or more per stage of the MPC protocol). This is used to give a bird's
-- eye view of the state of the computations to help debug and track progress.
CREATE TABLE MeasurementLogEntries (
  AdvertiserId    INT64 NOT NULL,
  MeasurementConfigId  INT64 NOT NULL,
  ScheduleId      INT64 NOT NULL,
  MeasurementId        INT64 NOT NULL,
  CreateTime      TIMESTAMP NOT NULL OPTIONS (allow_commit_timestamp = true),

  -- MeasurementLogDetails serialized proto.
  MeasurementLogDetails      BYTES(MAX) NOT NULL,
  MeasurementLogDetailsJson  STRING(MAX) NOT NULL,
) PRIMARY KEY (AdvertiserId, MeasurementConfigId, ScheduleId, MeasurementId, CreateTime),
  INTERLEAVE IN PARENT Measurements ON DELETE CASCADE;

CREATE TABLE MeasurementConfigCampaigns (
  AdvertiserId    INT64 NOT NULL,
  MeasurementConfigId  INT64 NOT NULL,
  DataProviderId  INT64 NOT NULL,
  CampaignId      INT64 NOT NULL,

  CONSTRAINT FK_Campaign
    FOREIGN KEY (DataProviderId, CampaignId)
    REFERENCES Campaigns(DataProviderId, CampaignId),
) PRIMARY KEY (AdvertiserId, MeasurementConfigId, DataProviderId, CampaignId),
  INTERLEAVE IN PARENT MeasurementConfigs ON DELETE CASCADE;

-- The Metric value is actually stored by the Duchy. The Duchy has a map from
-- the ExternalRequisitionId to the blob storage path for the metric value (i.e.
-- the bytes provided by the Data Provider).
CREATE TABLE Requisitions (
  MeasurementId               INT64 NOT NULL,
  DataProviderId              INT64 NOT NULL,
  RequisitionId               INT64 NOT NULL,

  CreateTime                  TIMESTAMP NOT NULL
                              OPTIONS (allow_commit_timestamp = true),

  ExternalRequisitionId       INT64 NOT NULL,
  CombinedPublicKeyResourceId STRING(MAX) NOT NULL,

  WindowStartTime             TIMESTAMP NOT NULL,
  WindowEndTime               TIMESTAMP NOT NULL,

  State                       INT64 NOT NULL,  -- RequisitionState proto enum

  -- When a Requisition is fulfilled, this is set to the Duchy that fulfilled
  -- the Requisition.
  DuchyId                     STRING(MAX),

  -- RequisitionDetails serialized proto
  RequisitionDetails          BYTES(MAX),
  RequisitionDetailsJson      STRING(MAX),
) PRIMARY KEY (DataProviderId, CampaignId, RequisitionId),
  INTERLEAVE IN PARENT Campaigns ON DELETE CASCADE;

CREATE UNIQUE INDEX RequisitionsByExternalId ON Requisitions(ExternalRequisitionId);


-- Stores the details and state of duchies for the parent computation of parent
-- Measurement.
CREATE TABLE ComputationParticipants (
  MeasurementId               INT64 NOT NULL,
  DuchyId                     INT64 NOT NULL,

  State                       INT64 NOT NULL,  -- ComputationParticipantState proto enum

  -- ParticipantDetails serialized proto
  ParticipantDetails          BYTES(MAX),
  ParticipantDetailsJson      STRING(MAX),


) PRIMARY KEY (DataProviderId, CampaignId, RequisitionId),
  INTERLEAVE IN PARENT Campaigns ON DELETE CASCADE;

CREATE UNIQUE INDEX ComputationParticipantsByExternalId ON ComputationParticipants(DuchyId, MeasurementId);


